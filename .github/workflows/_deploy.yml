# name: Build and Deploy Next.js to AWS S3
# on:
#     push:
#         branches:
#             - master
#             - stage

# env:
#     AWS_REGION: ${{ secrets.AWS_REGION_NAME }} # AWS 리전
#     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS 액세스 키 ID
#     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS 비밀 액세스 키
#     ACTION_NAME: ${{ github.workflow }} # 현재 GitHub Actions 워크플로우 이름
#     REPO_NAME: ${{ github.repository }} # 현재 GitHub 리포지토리 이름
#     ACTION_ID: ${{ github.run_id }} # 현재 GitHub Actions 실행 ID
#     GITHUB_REF: ${{ github.ref }} # 현재 GitHub 참조 (브랜치 또는 태그)
#     CURL_URL: "https://wh.jandi.com/connect-api/webhook/15413767/4421b38fddc9a35f851d10c1adb4216f" # JANDI 웹훅 URL
#     CURL_ACCEPT: "application/vnd.tosslab.jandi-v2+json" # JANDI 웹훅의 Accept 헤더
#     CURL_CONTENT_TYPE: "application/json" # JANDI 웹훅의 Content-Type 헤더

# jobs:
#     build-and-deploy:
#         runs-on: ubuntu-latest
#         steps:
#             # 리포지토리 체크아웃
#             - name: Checkout Repository
#               uses: actions/checkout@v2

#             # Next.js 의존성 캐싱
#             - name: Cache Next.js dependencies
#               uses: actions/cache@v3
#               with:
#                   path: |
#                       ~/.npm
#                       .next/cache
#                   key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
#                   restore-keys: |
#                       ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

#             # 작업 시작 알림
#             - name: Notification Started
#               run: |
#                   MESSAGE="$REPO_NAME $ACTION_NAME 액션이 시작되었습니다."
#                   ACTION_URL="https://github.com/$REPO_NAME/actions/runs/$ACTION_ID"
#                   curl -X POST ${CURL_URL} \
#                       -H "Accept: ${CURL_ACCEPT}" \
#                       -H "Content-Type: ${CURL_CONTENT_TYPE}" \
#                       --data-binary "{\"body\":\"[[${GITHUB_REF##*/}]]($ACTION_URL}) ${MESSAGE}\"}"

#             # Node.js 설정
#             - name: Set up Node.js
#               uses: actions/setup-node@v1
#               with:
#                   node-version: "16"

#             # AWS 자격 증명 구성
#             - name: Configure AWS credentials
#               uses: aws-actions/configure-aws-credentials@v1
#               with:
#                   aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
#                   aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
#                   aws-region: ${{ env.AWS_REGION }}

#             # 의존성 설치
#             - name: Install Dependencies
#               run: npm install --legacy-peer-deps

#             # 프로덕션 빌드 (master 브랜치)
#             - name: Build for Production
#               if: github.ref == 'refs/heads/master'
#               run: npm run build:production

#             # 개발 빌드 (비 master 브랜치)
#             - name: Build for Development
#               if: github.ref != 'refs/heads/master'
#               run: npm run build:staging

#             # 정적 사이트 내보내기
#             - name: Export Static Site
#               run: npm run export

#             # S3에 배포
#             - name: Deploy to S3
#               run: |
#                   if [ "${{ github.ref }}" == "refs/heads/master" ]; then
#                       aws s3 sync ./out s3://${{ secrets.AWS_S3_BUCKET_NAME_PRODUCT }} --delete
#                   elif [ "${{ github.ref }}" == "refs/heads/stage" ]; then
#                       aws s3 sync ./out s3://${{ secrets.AWS_S3_BUCKET_NAME_STAGING }} --delete
#                   fi

#             # 성공 알림
#             - name: Notification Success
#               if: success()
#               run: |
#                   MESSAGE="$REPO_NAME $ACTION_NAME 액션이 성공하였습니다"
#                   curl -X POST ${CURL_URL} \
#                     -H "Accept: ${CURL_ACCEPT}" \
#                     -H "Content-Type: ${CURL_CONTENT_TYPE}" \
#                     --data-binary "{\"body\":\"$MESSAGE\"}"

#             # 실패 알림
#             - name: Notification Failed
#               if: failure()
#               run: |
#                   MESSAGE="$REPO_NAME $ACTION_NAME 액션이 실패하였습니다"
#                   curl -X POST ${CURL_URL} \
#                     -H "Accept: ${CURL_ACCEPT}" \
#                     -H "Content-Type: ${CURL_CONTENT_TYPE}" \
#                     --data-binary "{\"body\":\"$MESSAGE\"}"

#             # CloudFront 무효화
#             - name: Invalidate CloudFront Distribution
#               if: success()
#               run: |
#                   aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
